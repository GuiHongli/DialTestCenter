# DialTestCenter API 接口汇总
# 版本: 1.0.0
# 更新时间: 2024-01-01

# 基础信息
base_url: "http://localhost:8080/api"
context_path: "/api"
swagger_ui: "http://localhost:8080/swagger-ui.html"

# 用户管理模块 (/users)
user_management:
  module: "用户管理"
  description: "提供完整的用户增删改查功能"
  base_path: "/users"
  
  endpoints:
    # 获取所有用户
    - method: "GET"
      path: "/users"
      summary: "获取所有用户"
      description: "分页获取系统中的所有用户列表"
      parameters:
        - name: "page"
          type: "integer"
          required: false
          default: 0
          description: "页码（从0开始）"
        - name: "size"
          type: "integer"
          required: false
          default: 20
          description: "每页大小"
      responses:
        - code: 200
          description: "成功获取用户列表"
        - code: 500
          description: "服务器内部错误"
    
    # 创建新用户
    - method: "POST"
      path: "/users"
      summary: "创建新用户"
      description: "创建新的用户账户"
      request_body:
        required: true
        schema: "CreateUserRequest"
      responses:
        - code: 201
          description: "用户创建成功"
        - code: 400
          description: "请求参数错误"
        - code: 500
          description: "服务器内部错误"
    
    # 根据ID获取用户
    - method: "GET"
      path: "/users/{id}"
      summary: "根据ID获取用户"
      description: "根据用户ID获取用户详细信息"
      parameters:
        - name: "id"
          type: "integer"
          required: true
          description: "用户ID"
      responses:
        - code: 200
          description: "成功获取用户信息"
        - code: 404
          description: "用户不存在"
        - code: 500
          description: "服务器内部错误"
    
    # 更新用户信息
    - method: "PUT"
      path: "/users/{id}"
      summary: "更新用户信息"
      description: "根据用户ID更新用户信息"
      parameters:
        - name: "id"
          type: "integer"
          required: true
          description: "用户ID"
      request_body:
        required: true
        schema: "UpdateUserRequest"
      responses:
        - code: 200
          description: "用户信息更新成功"
        - code: 400
          description: "请求参数错误"
        - code: 404
          description: "用户不存在"
        - code: 500
          description: "服务器内部错误"
    
    # 删除用户
    - method: "DELETE"
      path: "/users/{id}"
      summary: "删除用户"
      description: "根据用户ID删除用户"
      parameters:
        - name: "id"
          type: "integer"
          required: true
          description: "用户ID"
      responses:
        - code: 200
          description: "用户删除成功"
        - code: 404
          description: "用户不存在"
        - code: 500
          description: "服务器内部错误"
    
    # 搜索用户
    - method: "GET"
      path: "/users/search"
      summary: "搜索用户"
      description: "根据关键词搜索用户（用户名或邮箱模糊匹配）"
      parameters:
        - name: "keyword"
          type: "string"
          required: false
          description: "搜索关键词"
      responses:
        - code: 200
          description: "搜索成功"
        - code: 500
          description: "服务器内部错误"
    
    # 获取用户总数
    - method: "GET"
      path: "/users/count"
      summary: "获取用户总数"
      description: "获取系统中用户的总数量"
      responses:
        - code: 200
          description: "成功获取用户总数"
        - code: 500
          description: "服务器内部错误"
    
    # 健康检查
    - method: "GET"
      path: "/users/users/health"
      summary: "健康检查"
      description: "检查用户服务是否正常运行"
      responses:
        - code: 200
          description: "服务正常运行"

# 数据模型
data_models:
  User:
    description: "用户实体"
    properties:
      id: "用户唯一标识 (Long)"
      username: "用户名 (String, 3-50字符, 只允许字母数字下划线)"
      email: "用户邮箱 (String, 邮箱格式, 最大100字符)"
      password: "用户密码 (String, 6-100字符)"
      createdAt: "创建时间 (LocalDateTime)"
      updatedAt: "最后更新时间 (LocalDateTime)"
  
  CreateUserRequest:
    description: "创建用户请求"
    required_fields: ["username", "email", "password"]
    properties:
      username: "用户名 (String, 3-50字符)"
      email: "用户邮箱 (String, 邮箱格式)"
      password: "用户密码 (String, 6-100字符)"
  
  UpdateUserRequest:
    description: "更新用户请求"
    required_fields: []
    properties:
      username: "用户名 (String, 3-50字符, 可选)"
      email: "用户邮箱 (String, 邮箱格式, 可选)"
      password: "用户密码 (String, 6-100字符, 可选)"
  
  ErrorResponse:
    description: "错误响应"
    properties:
      timestamp: "错误发生时间 (LocalDateTime)"
      status: "HTTP状态码 (Integer)"
      error: "错误类型 (String)"
      message: "错误详细信息 (String)"
      path: "请求路径 (String)"

# 状态码说明
http_status_codes:
  200: "请求成功"
  201: "创建成功"
  400: "请求参数错误"
  404: "资源不存在"
  500: "服务器内部错误"

# 认证方式
authentication:
  type: "Bearer Token (JWT)"
  description: "使用JWT令牌进行身份验证"
  header: "Authorization: Bearer {token}"

# 跨域支持
cors:
  enabled: true
  origins: "*"
  methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
  headers: ["*"]

# 数据库配置
database:
  type: "PostgreSQL"
  version: "14+"
  connection_pool: "HikariCP"
  orm: "JPA/Hibernate"
  ddl_auto: "update"

# 开发工具
development_tools:
  - "Spring Boot DevTools"
  - "H2 Console (开发环境)"
  - "Actuator Endpoints"
  - "Swagger UI"

# 测试
testing:
  framework: "JUnit 4"
  mock_framework: "Mockito 5.8.0"
  test_coverage: "80%+"
  integration_tests: "支持"

# 部署
deployment:
  java_version: "JDK 21"
  spring_boot_version: "3.4.5"
  min_memory: "512MB"
  recommended_memory: "1GB"
  port: 8080
