openapi: 3.0.3
info:
  title: DialTestCenter User Management API
  description: |
    DialTestCenter project user management interface documentation
    Provides complete user CRUD functionality with real database operations
  version: 1.0.0
  contact:
    name: DialTestCenter Team
    email: support@dialtestcenter.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api
    description: Local Development Environment

tags:
  - name: User Management
    description: All user-related operation interfaces

paths:
  /users:
    get:
      tags:
        - User Management
      summary: Get All Users
      description: Get paginated list of all users in the system
      responses:
        '200':
          description: Successfully retrieved user list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    
    post:
      tags:
        - User Management
      summary: Create New User
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      tags:
        - User Management
      summary: Get User by ID
      description: Get user details by user ID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Successfully retrieved user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      tags:
        - User Management
      summary: Update User
      description: Update user information by user ID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      tags:
        - User Management
      summary: Delete User
      description: Delete user by user ID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: User deleted successfully

  /users/search:
    get:
      tags:
        - User Management
      summary: Search Users
      description: Search users by keyword
      parameters:
        - name: keyword
          in: query
          description: Search keyword
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Search successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/count:
    get:
      tags:
        - User Management
      summary: Get User Count
      description: Get total number of users
      responses:
        '200':
          description: Successfully retrieved user count
          content:
            application/json:
              schema:
                type: integer

  /users/health:
    get:
      tags:
        - User Management
      summary: Health Check
      description: Check if user service is running
      responses:
        '200':
          description: Service running normally
          content:
            application/json:
              schema:
                type: string
              example: "User service is running!"

components:
  schemas:
    User:
      type: object
      required:
        - username
        - email
      properties:
        id:
          type: integer
          description: User unique identifier
        username:
          type: string
          description: Username
          minLength: 3
          maxLength: 50
        email:
          type: string
          description: User email
          format: email
        password:
          type: string
          description: User password
          minLength: 6
        createdAt:
          type: string
          format: date-time
          description: Creation time
        updatedAt:
          type: string
          format: date-time
          description: Last update time

    CreateUserRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
